            });
            updateSyncIndicator();
        }

        function cleanupJudgeData(peerId) {
            Object.keys(app.data.judges).forEach(judgeKey => {
                const judge = app.data.judges[judgeKey];
                if (judge.peerId === peerId) {
                    judge.connected = false;
                    judge.lastUpdate = Date.now();
                }
            });
            
            if (app.session.role === 'delegate') {
                updateJudgeMonitoring();
            }
        }

        // =====================
        // GESTIONNAIRE DE SESSIONS
        // =====================
        
        function selectRole(role) {
            app.session.role = role;
            document.getElementById('roleSelector').classList.add('hidden');
            
            if (role === 'delegate') {
                document.getElementById('delegateInterface').classList.remove('hidden');
                showNotification('üëë Mode d√©l√©gu√© activ√©', 'success');
            } else if (role === 'judge') {
                document.getElementById('judgeAccessSection').classList.remove('hidden');
                showNotification('‚öñÔ∏è Mode juge activ√©', 'info');
            }
        }

        function goBack() {
            document.getElementById('judgeAccessSection').classList.add('hidden');
            document.getElementById('delegateInterface').classList.add('hidden');
            document.getElementById('judgeInterface').classList.add('hidden');
            document.getElementById('roleSelector').classList.remove('hidden');
            document.getElementById('contentArea').style.display = 'block';
            
            const syncIndicator = document.getElementById('syncIndicator');
            if (syncIndicator) syncIndicator.classList.add('hidden');
            
            app.session.role = '';
        }

        function createSession() {
            console.log('üöÄ Cr√©ation session...');
            
            const createButton = document.getElementById('createSessionButton');
            createButton.disabled = true;
            createButton.innerHTML = '<div class="loading-spinner"></div> Cr√©ation...';
            
            app.session.fightType = document.querySelector('input[name="fightType"]:checked').value;
            app.session.judgeCount = parseInt(document.querySelector('input[name="judgeCount"]:checked').value);
            app.session.rounds = getRoundsFromFightType(app.session.fightType);
            
            app.session.id = generateSessionId();
            app.session.code = generateUniqueCode();
            app.session.initialized = true;
            app.session.role = 'delegate';
            app.session.startTime = Date.now();
            app.session.status = 'active';
            
            initializeWebRTC().then(() => {
                console.log('‚úÖ WebRTC d√©l√©gu√© initialis√©');
                
                document.getElementById('configSection').classList.add('hidden');
                showDelegateInterface();
                
                showNotification('‚úÖ Session WebRTC cr√©√©e!', 'success');
                
                createButton.disabled = false;
                createButton.innerHTML = 'üöÄ Cr√©er Session WebRTC';
                
            }).catch(error => {
                console.error('‚ùå Erreur WebRTC:', error);
                showNotification('‚ùå Erreur cr√©ation: ' + error.message, 'error');
                
                createButton.disabled = false;
                createButton.innerHTML = 'üöÄ Cr√©er Session WebRTC';
            });
        }

        function accessJudgeSheet() {
            const accessKey = document.getElementById('accessKeyInput').value.trim();
            const judgeName = document.getElementById('judgeNameInput').value.trim();
            const judgeNumber = document.getElementById('judgeNumberInput').value.trim();
            
            if (!accessKey || !judgeName || !judgeNumber) {
                showNotification('‚ö†Ô∏è Veuillez remplir tous les champs', 'error');
                return;
            }
            
            if (!/^\d{4}$/.test(accessKey)) {
                showNotification('‚ùå Code √† 4 chiffres requis', 'error');
                return;
            }
            
            if (judgeName.length < 2) {
                showNotification('‚ùå Nom trop court', 'error');
                return;
            }
            
            const connectButton = document.getElementById('connectButton');
            connectButton.disabled = true;
            connectButton.innerHTML = '<div class="loading-spinner"></div> Connexion...';
            
            app.session.code = accessKey;
            app.session.judgeName = judgeName;
            app.session.judgeNumber = judgeNumber;
            app.session.judgeId = Math.floor(Math.random() * 1000) + 1;
            app.session.role = 'judge';
            
            initializeWebRTC().then(() => {
                const delegatePeerId = `delegate_${accessKey}`;
                return connectToPeer(delegatePeerId);
            }).then(() => {
                console.log('‚úÖ Connexion juge √©tablie');
                document.getElementById('judgeAccessSection').classList.add('hidden');
                showJudgeInterface();
                
                showNotification('‚úÖ Connexion WebRTC √©tablie!', 'success');
                
                connectButton.disabled = false;
                connectButton.innerHTML = 'üö™ Se connecter WebRTC';
                
            }).catch(error => {
                console.error('‚ùå Erreur connexion:', error);
                showNotification('‚ùå Erreur: ' + error.message, 'error');
                
                connectButton.disabled = false;
                connectButton.innerHTML = 'üö™ Se connecter WebRTC';
            });
        }

        // =====================
        // INTERFACE D√âL√âGU√â
        // =====================

        function showDelegateInterface() {
            document.getElementById('delegateDashboard').classList.remove('hidden');
            document.getElementById('contentArea').style.display = 'none';
            document.getElementById('syncIndicator').classList.remove('hidden');
            
            // Afficher infos session
            document.getElementById('sessionCodeDisplay').textContent = app.session.code;
            document.getElementById('fightTypeDisplay').textContent = getFightTypeLabel(app.session.fightType);
            document.getElementById('judgeCountDisplay').textContent = app.session.judgeCount;
            document.getElementById('roundsDisplay').textContent = app.session.rounds;
            
            updateJudgeMonitoring();
            
            // Mise √† jour p√©riodique
            setInterval(() => {
                if (app.session.role === 'delegate' && app.session.initialized) {
                    const activeTab = document.querySelector('.tab-panel.active');
                    if (activeTab) {
                        const tabId = activeTab.id;
                        switch(tabId) {
                            case 'monitoringTab':
                                updateJudgeMonitoring();
                                break;
                            case 'recapTab':
                                updateRecapTable();
                                break;
                            case 'resultTab':
                                updateFinalResult();
                                break;
                        }
                    }
                }
            }, 3000);
        }

        function updateFighterNames() {
            const redName = document.getElementById('fighterRedName').value.trim();
            const blueName = document.getElementById('fighterBlueName').value.trim();
            
            // Sauvegarder l'√©tat avant modification
            saveDelegateState('MODIFICATION NOMS TIREURS', {
                previousRed: app.data.fighters.red,
                previousBlue: app.data.fighters.blue,
                newRed: redName,
                newBlue: blueName
            });
            
            app.data.fighters.red = redName;
            app.data.fighters.blue = blueName;
            
            sendToAll({
                type: 'fighter_names',
                data: app.data.fighters
            }, 'normal');
            
            updateJudgeMonitoring();
            showNotification('üìù Noms mis √† jour', 'info', 2000);
        }

        // =====================
        // SYST√àME D'ONGLETS D√âL√âGU√â
        // =====================

        function showTab(tabName) {
            // Masquer tous les onglets
            document.querySelectorAll('.tab-panel').forEach(panel => {
                panel.classList.remove('active');
            });
            
            // D√©sactiver tous les boutons
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // Activer l'onglet s√©lectionn√©
            const targetTab = document.getElementById(tabName + 'Tab');
            if (targetTab) {
                targetTab.classList.add('active');
            }
            
            // Activer le bon bouton
            const buttons = document.querySelectorAll('.tab-button');
            const buttonIndex = ['monitoring', 'recap', 'result', 'export'].indexOf(tabName);
            if (buttonIndex !== -1 && buttons[buttonIndex]) {
                buttons[buttonIndex].classList.add('active');
            }
            
            // Mettre √† jour le contenu
            setTimeout(() => {
                switch(tabName) {
                    case 'monitoring':
                        updateJudgeMonitoring();
                        break;
                    case 'recap':
                        updateRecapTable();
                        break;
                    case 'result':
                        updateFinalResult();
                        break;
                    case 'export':
                        break;
                }
            }, 100);
        }

        function updateJudgeMonitoring() {
            const container = document.getElementById('judgeMonitoring');
            if (!container) return;
            
            container.innerHTML = '<h3>üìä Monitoring des Juges - Interface CPTE Temps R√©el</h3>';
            
            const judgeCount = Object.keys(app.data.judges).length;
            if (judgeCount === 0) {
                container.innerHTML += `
                    <div class="message info">
                        <h4>üéØ En attente de connexion des juges...</h4>
                        <p><strong>Code de session:</strong> ${app.session.code}</p>
                        <p><strong>Type:</strong> ${getFightTypeLabel(app.session.fightType)}</p>
                        <p>Les juges doivent utiliser ce code pour se connecter.</p>
                    </div>
                `;
                return;
            }
            
            // Cr√©er une fiche pour chaque juge
            Object.keys(app.data.judges).forEach(judgeKey => {
                const judge = app.data.judges[judgeKey];
                const judgeContainer = createJudgeMonitoringCard(judge);
                container.appendChild(judgeContainer);
            });
        }

        function createJudgeMonitoringCard(judge) {
            const container = document.createElement('div');
            container.className = `judge-sheet-container ${judge.connected ? 'connected' : ''}`;
            container.id = `judge-monitor-${judge.id}`;
            
            // Header avec statut
            const header = document.createElement('div');
            header.className = 'judge-sheet-header';
            header.innerHTML = `
                <div>
                    <h3>üë®‚Äç‚öñÔ∏è Juge ${judge.id} - ${judge.name || 'Nom non d√©fini'}</h3>
                    <p><strong>Num√©ro:</strong> ${judge.number || 'Non d√©fini'}</p>
                </div>
                <div class="judge-sheet-status">
                    <div class="status-indicator ${judge.connected ? 'connected' : ''}"></div>
                    <span>${judge.connected ? 'Connect√©' : 'D√©connect√©'}</span>
                    <span style="font-size: 11px; color: #7f8c8d; margin-left: 10px;">
                        ${judge.lastUpdate ? formatTime(judge.lastUpdate) : 'Jamais'}
                    </span>
                </div>
            `;
            
            // Table CPTE compl√®te identique √† celle des juges
            const table = createCompleteMonitoringTable(judge);
            
            container.appendChild(header);
            container.appendChild(table);
            
            return container;
        }

        function createCompleteMonitoringTable(judge) {
            const isCombatType = isCombat();
            const table = document.createElement('table');
            table.className = 'scoring-table';
            table.style.fontSize = '11px';
            table.style.tableLayout = 'fixed';
            
            // Cr√©er l'en-t√™te
            let headerHTML = '';
            if (isCombatType) {
                headerHTML = `
                    <thead>
                        <tr>
                            <th rowspan="2" style="width: 120px;">NOTATION</th>
                            <th colspan="4" style="background-color: #ef5350; color: white;">COIN ROUGE</th>
                            <th colspan="4" style="background-color: #42a5f5; color: white;">COIN BLEU</th>
                        </tr>
                        <tr>
                            <th class="corner-red">Reprise</th>
                            <th class="corner-red">NOTE</th>
                            <th class="corner-red">AVT</th>
                            <th class="corner-red">CPTE</th>
                            <th class="corner-blue">Reprise</th>
                            <th class="corner-blue">NOTE</th>
                            <th class="corner-blue">AVT</th>
                            <th class="corner-blue">CPTE</th>
                        </tr>
                    </thead>
                `;
            } else {
                headerHTML = `
                    <thead>
                        <tr>
                            <th rowspan="2" style="width: 120px;">NOTATION</th>
                            <th colspan="3" style="background-color: #ef5350; color: white;">COIN ROUGE</th>
                            <th colspan="3" style="background-color: #42a5f5; color: white;">COIN BLEU</th>
                        </tr>
                        <tr>
                            <th class="corner-red">Reprise</th>
                            <th class="corner-red">NOTE</th>
                            <th class="corner-red">AVT</th>
                            <th class="corner-blue">Reprise</th>
                            <th class="corner-blue">NOTE</th>
                            <th class="corner-blue">AVT</th>
                        </tr>
                    </thead>
                `;
            }
            
            // Cr√©er le corps du tableau
            const notationText = isCombatType ? 
                `√âgalit√©: 2/2<br>Gagn√©: 3/2<br>Domin√©: 3/1<br>Non d√©cision: X/X<br>Avertissement: -1<br>Compte: -1<br>Bonus: +1` :
                `√âgalit√©: 2/2<br>Gagn√©: 3/2<br>Domin√©: 3/1<br>Non d√©cision: X/X<br>Avertissement: -1<br>Bonus: +1`;
            
            let bodyHTML = '<tbody>';
            
            // Lignes de reprises
            for (let i = 1; i <= app.session.rounds; i++) {
                const rowspanAttr = i === 1 ? `rowspan="${app.session.rounds}"` : '';
                const notationCell = i === 1 ? `<td ${rowspanAttr} style="vertical-align: top; font-size: 9px; padding: 3px;"><small>${notationText}</small></td>` : '';
                
                // R√©cup√©rer les donn√©es du juge
                const roundScore = judge.scores && judge.scores[i] ? judge.scores[i] : null;
                const redScore = roundScore ? roundScore.red : '-';
                const blueScore = roundScore ? roundScore.blue : '-';
                
                // Avertissements
                const redWarnings = judge.warnings && judge.warnings.red && judge.warnings.red[i] ? 'A'.repeat(judge.warnings.red[i]) : '';
                const blueWarnings = judge.warnings && judge.warnings.blue && judge.warnings.blue[i] ? 'A'.repeat(judge.warnings.blue[i]) : '';
                
                if (isCombatType) {
                    // Comptes pour les combats
                    const redComptes = judge.comptes && judge.comptes.red && judge.comptes.red[i] ? 'C'.repeat(judge.comptes.red[i]) : '';
                    const blueComptes = judge.comptes && judge.comptes.blue && judge.comptes.blue[i] ? 'C'.repeat(judge.comptes.blue[i]) : '';
                    
                    bodyHTML += `
                        <tr>
                            ${notationCell}
                            <td class="corner-red">${i}</td>
                            <td class="corner-red" style="font-weight: bold;">${redScore}</td>
                            <td class="corner-red" style="font-size: 10px; color: #dc3545;">${redWarnings}</td>
                            <td class="corner-red" style="font-size: 10px; color: #6c757d;">${redComptes}</td>
                            <td class="corner-blue">${i}</td>
                            <td class="corner-blue" style="font-weight: bold;">${blueScore}</td>
                            <td class="corner-blue" style="font-size: 10px; color: #dc3545;">${blueWarnings}</td>
                            <td class="corner-blue" style="font-size: 10px; color: #6c757d;">${blueComptes}</td>
                        </tr>
                    `;
                } else {
                    bodyHTML += `
                        <tr>
                            ${notationCell}
                            <td class="corner-red">${i}</td>
                            <td class="corner-red" style="font-weight: bold;">${redScore}</td>
                            <td class="corner-red" style="font-size: 10px; color: #dc3545;">${redWarnings}</td>
                            <td class="corner-blue">${i}</td>
                            <td class="corner-blue" style="font-weight: bold;">${blueScore}</td>
                            <td class="corner-blue" style="font-size: 10px; color: #dc3545;">${blueWarnings}</td>
                        </tr>
                    `;
                }
            }
            
            // Calculer les totaux
            let redSubtotal1 = 0, blueSubtotal1 = 0;
            let redWarningTotal = 0, blueWarningTotal = 0;
            let redCompteTotal = 0, blueCompteTotal = 0;
            
            // Somme des scores
            for (let i = 1; i <= app.session.rounds; i++) {
                const roundScore = judge.scores && judge.scores[i] ? judge.scores[i] : null;
                if (roundScore) {
                    redSubtotal1 += roundScore.red || 0;
                    blueSubtotal1 += roundScore.blue || 0;
                }
            }
            
            // Somme des avertissements
            if (judge.warnings) {
                if (judge.warnings.red) {
                    for (let round in judge.warnings.red) {
                        redWarningTotal += judge.warnings.red[round] || 0;
                    }
                }
                if (judge.warnings.blue) {
                    for (let round in judge.warnings.blue) {
                        blueWarningTotal += judge.warnings.blue[round] || 0;
                    }
                }
            }
            
            // Somme des comptes (combats seulement)
            if (isCombatType && judge.comptes) {
                if (judge.comptes.red) {
                    for (let round in judge.comptes.red) {
                        redCompteTotal += judge.comptes.red[round] || 0;
                    }
                }
                if (judge.comptes.blue) {
                    for (let round in judge.comptes.blue) {
                        blueCompteTotal += judge.comptes.blue[round] || 0;
                    }
                }
            }
            
            const redSubtotal2 = redSubtotal1 - redWarningTotal - redCompteTotal;
            const blueSubtotal2 = blueSubtotal1 - blueWarningTotal - blueCompteTotal;
            const redBonusValue = judge.bonuses ? (judge.bonuses.red || 0) : 0;
            const blueBonusValue = judge.bonuses ? (judge.bonuses.blue || 0) : 0;
            const redTotal = redSubtotal2 + redBonusValue;
            const blueTotal = blueSubtotal2 + blueBonusValue;
            
            // Lignes de totaux
            if (isCombatType) {
                bodyHTML += `
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Sous TOTAUX 1</td>
                        <td colspan="3" class="corner-red" style="text-align: center; font-weight: bold;">${redSubtotal1}</td>
                        <td class="corner-red"></td>
                        <td colspan="3" class="corner-blue" style="text-align: center; font-weight: bold;">${blueSubtotal1}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Avertissements</td>
                        <td colspan="3" class="corner-red" style="text-align: center; font-weight: bold;">${redWarningTotal ? -redWarningTotal : 0}</td>
                        <td class="corner-red"></td>
                        <td colspan="3" class="corner-blue" style="text-align: center; font-weight: bold;">${blueWarningTotal ? -blueWarningTotal : 0}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Compte</td>
                        <td colspan="3" class="corner-red" style="text-align: center; font-weight: bold;">${redCompteTotal ? -redCompteTotal : 0}</td>
                        <td class="corner-red"></td>
                        <td colspan="3" class="corner-blue" style="text-align: center; font-weight: bold;">${blueCompteTotal ? -blueCompteTotal : 0}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Sous TOTAUX 2</td>
                        <td colspan="3" class="corner-red" style="text-align: center; font-weight: bold;">${redSubtotal2}</td>
                        <td class="corner-red"></td>
                        <td colspan="3" class="corner-blue" style="text-align: center; font-weight: bold;">${blueSubtotal2}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Bonus</td>
                        <td colspan="3" class="corner-red" style="text-align: center; font-weight: bold;">${redBonusValue}</td>
                        <td class="corner-red"></td>
                        <td colspan="3" class="corner-blue" style="text-align: center; font-weight: bold;">${blueBonusValue}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #e9ecef; font-size: 12px;">
                        <td style="text-align: left; padding-left: 5px; font-weight: bold;">TOTAUX</td>
                        <td colspan="3" class="corner-red" style="text-align: center; font-weight: bold; font-size: 14px;">${redTotal}</td>
                        <td class="corner-red abandon-cell ${judge.abandons && judge.abandons.red ? 'abandoned' : ''}" style="font-size: 8px;">${judge.abandons && judge.abandons.red ? 'ABANDON' : 'EN LICE'}</td>
                        <td colspan="3" class="corner-blue" style="text-align: center; font-weight: bold; font-size: 14px;">${blueTotal}</td>
                        <td class="corner-blue abandon-cell ${judge.abandons && judge.abandons.blue ? 'abandoned' : ''}" style="font-size: 8px;">${judge.abandons && judge.abandons.blue ? 'ABANDON' : 'EN LICE'}</td>
                    </tr>
                    <tr style="background: #e1bee7; font-size: 11px;">
                        <td style="text-align: left; padding-left: 5px; font-weight: bold;">D√âCISION</td>
                        <td colspan="8" style="font-weight: bold; text-align: center;">${judge.result || 'En cours...'}</td>
                    </tr>
                `;
            } else {
                bodyHTML += `
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Sous TOTAUX 1</td>
                        <td colspan="2" class="corner-red" style="text-align: center; font-weight: bold;">${redSubtotal1}</td>
                        <td class="corner-red"></td>
                        <td colspan="2" class="corner-blue" style="text-align: center; font-weight: bold;">${blueSubtotal1}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Avertissements</td>
                        <td colspan="2" class="corner-red" style="text-align: center; font-weight: bold;">${redWarningTotal ? -redWarningTotal : 0}</td>
                        <td class="corner-red"></td>
                        <td colspan="2" class="corner-blue" style="text-align: center; font-weight: bold;">${blueWarningTotal ? -blueWarningTotal : 0}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Sous TOTAUX 2</td>
                        <td colspan="2" class="corner-red" style="text-align: center; font-weight: bold;">${redSubtotal2}</td>
                        <td class="corner-red"></td>
                        <td colspan="2" class="corner-blue" style="text-align: center; font-weight: bold;">${blueSubtotal2}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #f8f9fa; font-size: 10px;">
                        <td style="text-align: left; padding-left: 5px;">Bonus</td>
                        <td colspan="2" class="corner-red" style="text-align: center; font-weight: bold;">${redBonusValue}</td>
                        <td class="corner-red"></td>
                        <td colspan="2" class="corner-blue" style="text-align: center; font-weight: bold;">${blueBonusValue}</td>
                        <td class="corner-blue"></td>
                    </tr>
                    <tr style="background: #e9ecef; font-size: 12px;">
                        <td style="text-align: left; padding-left: 5px; font-weight: bold;">TOTAUX</td>
                        <td colspan="2" class="corner-red" style="text-align: center; font-weight: bold; font-size: 14px;">${redTotal}</td>
                        <td class="corner-red abandon-cell ${judge.abandons && judge.abandons.red ? 'abandoned' : ''}" style="font-size: 8px;">${judge.abandons && judge.abandons.red ? 'ABANDON' : 'EN LICE'}</td>
                        <td colspan="2" class="corner-blue" style="text-align: center; font-weight: bold; font-size: 14px;">${blueTotal}</td>
                        <td class="corner-blue abandon-cell ${judge.abandons && judge.abandons.blue ? 'abandoned' : ''}" style="font-size: 8px;">${judge.abandons && judge.abandons.blue ? 'ABANDON' : 'EN LICE'}</td>
                    </tr>
                    <tr style="background: #e1bee7; font-size: 11px;">
                        <td style="text-align: left; padding-left: 5px; font-weight: bold;">D√âCISION</td>
                        <td colspan="6" style="font-weight: bold; text-align: center;">${judge.result || 'En cours...'}</td>
                    </tr>
                `;
            }
            
            bodyHTML += '</tbody>';
            table.innerHTML = headerHTML + bodyHTML;
            
            return table;
        }

        function updateRecapTable() {
            const container = document.getElementById('recapTableContainer');
            if (!container) return;

            const judgeCount = Object.keys(app.data.judges).length;
            if (judgeCount === 0) {
                container.innerHTML = `
                    <div class="message info" style="margin: 20px 0;">
                        <p>En attente des donn√©es des juges connect√©s...</p>
                    </div>
                `;
                return;
            }

            // Cr√©er le tableau r√©capitulatif
            let tableHTML = `
                <table class="recap-table">
                    <thead>
                        <tr>
                            <th rowspan="2">Reprise</th>
            `;

            // En-t√™tes des juges
            Object.keys(app.data.judges).forEach(judgeKey => {
                const judge = app.data.judges[judgeKey];
                tableHTML += `<th colspan="2" class="judge-header">Juge ${judge.id} - ${judge.name || 'Non d√©fini'}</th>`;
            });

            tableHTML += `</tr><tr>`;
            
            // Sous-en-t√™tes Rouge/Bleu
            Object.keys(app.data.judges).forEach(() => {
                tableHTML += `<th class="score-red">Rouge</th><th class="score-blue">Bleu</th>`;
            });

            tableHTML += `</tr></thead><tbody>`;

            // Lignes par reprise
            for (let round = 1; round <= app.session.rounds; round++) {
                tableHTML += `<tr><td class="round-cell">Reprise ${round}</td>`;
                
                Object.keys(app.data.judges).forEach(judgeKey => {
                    const judge = app.data.judges[judgeKey];
                    const roundScore = judge.scores && judge.scores[round] ? judge.scores[round] : { red: '-', blue: '-' };
                    tableHTML += `<td class="score-red">${roundScore.red || '-'}</td><td class="score-blue">${roundScore.blue || '-'}</td>`;
                });
                
                tableHTML += `</tr>`;
            }

            // Ligne des totaux
            tableHTML += `<tr class="total-row"><td>TOTAUX</td>`;
            Object.keys(app.data.judges).forEach(judgeKey => {
                const judge = app.data.judges[judgeKey];
                tableHTML += `<td class="score-red">${judge.totalRed || 0}</td><td class="score-blue">${judge.totalBlue || 0}</td>`;
            });
            tableHTML += `</tr>`;

            // Ligne des r√©sultats
            tableHTML += `<tr class="final-result"><td>R√âSULTAT</td>`;
            Object.keys(app.data.judges).forEach(judgeKey => {
                const judge = app.data.judges[judgeKey];
                const result = judge.result || 'En cours...';
                tableHTML += `<td colspan="2">${result}</td>`;
            });
            tableHTML += `</tr>`;

            tableHTML += `</tbody></table>`;
            
            container.innerHTML = tableHTML;
        }

        function updateFinalResult() {
            const container = document.getElementById('finalResultContainer');
            if (!container) return;

            const judgeCount = Object.keys(app.data.judges).length;
            const completedJudges = Object.keys(app.data.judges).filter(k => {
                const judge = app.data.judges[k];
                return judge.result && judge.result !== 'En cours...' && judge.result !== 'En attente...';
            });

            if (completedJudges.length === 0) {
                container.innerHTML = `
                    <div class="message info" style="margin: 20px 0;">
                        <p>En attente des d√©cisions de tous les juges...</p>
                    </div>
                `;
                return;
            }

            if (completedJudges.length < judgeCount) {
                container.innerHTML = `
                    <div class="message warning" style="margin: 20px 0;">
                        <p>D√©cisions re√ßues: ${completedJudges.length}/${judgeCount}</p>
                        <p>En attente des autres juges...</p>
                    </div>
                `;
                return;
            }

            // Calculer le r√©sultat final par majorit√©
            let redVotes = 0;
            let blueVotes = 0;
            const judgeVotes = {};

            completedJudges.forEach(judgeKey => {
                const judge = app.data.judges[judgeKey];
                const result = judge.result.toLowerCase();
                
                if (result.includes('rouge')) {
                    redVotes++;
                    judgeVotes[judgeKey] = 'rouge';
                } else if (result.includes('bleu')) {
                    blueVotes++;
                    judgeVotes[judgeKey] = 'bleu';
                } else {
                    judgeVotes[judgeKey] = 'autre';
                }
            });

            let finalResult = '';
            let winnerColor = '';

            if (redVotes > blueVotes) {
                finalResult = `VICTOIRE COIN ROUGE - ${app.data.fighters.red || 'Tireur Rouge'}`;
                winnerColor = 'red';
            } else if (blueVotes > redVotes) {
                finalResult = `VICTOIRE COIN BLEU - ${app.data.fighters.blue || 'Tireur Bleu'}`;
                winnerColor = 'blue';
            } else {
                finalResult = '√âGALIT√â - D√©cision partag√©e';
                winnerColor = 'tie';
            }

            const majorityDetails = Object.keys(judgeVotes).map(judgeKey => {
                const judge = app.data.judges[judgeKey];
                const vote = judgeVotes[judgeKey];
                return `
                    <div class="judge-vote">
                        <span>Juge ${judge.id} (${judge.name})</span>
                        <span class="${vote === 'rouge' ? 'winner' : ''}">${judge.result}</span>
                    </div>
