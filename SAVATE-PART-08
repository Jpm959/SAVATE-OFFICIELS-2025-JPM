                for (let color of ['red', 'blue']) {
                    for (let i = 1; i <= 5; i++) {
                        updateJudgeWarningDisplay(color, i);
                        updateJudgeCompteDisplay(color, i);
                    }
                }
                
                // 10. Cacher tous les messages d'alerte
                const messages = ['judgeDisqualificationMessage', 'judgeAbandonMessage', 'judgeEqualityWarning'];
                messages.forEach(id => {
                    const element = safeGetElement(id);
                    if (element) element.style.display = 'none';
                });
                
                // 11. R√©activer tous les contr√¥les
                document.querySelectorAll('.score-select').forEach(select => {
                    select.disabled = false;
                    select.classList.remove('locked');
                });
                document.querySelectorAll('.score-input').forEach(input => {
                    input.disabled = false;
                });
                document.querySelectorAll('.warning-cell').forEach(cell => {
                    cell.style.pointerEvents = 'auto';
                });
                document.querySelectorAll('.compte-cell').forEach(cell => {
                    cell.style.pointerEvents = 'auto';
                });
                
                // 12. Synchroniser la r√©initialisation
                syncJudgeData('delegate_reset_applied');
                
            } catch (error) {
                console.error('Erreur lors de la r√©initialisation:', error);
                showNotification('‚ùå Erreur lors de la r√©initialisation.', 'error');
            }
        }

        function resetJudgeConnection() {
            // Fermer toutes les connexions WebRTC
            if (app.webrtc.peer) {
                app.webrtc.peer.destroy();
            }
            
            // R√©initialiser les variables de session (garder les infos personnelles pour faciliter la reconnexion)
            const savedJudgeName = app.session.judgeName;
            const savedJudgeNumber = app.session.judgeNumber;
            
            app.webrtc = {
                peer: null,
                connections: new Map(),
                isHost: false,
                peerId: null,
                lastSyncTime: Date.now(),
                syncCount: 0,
                syncErrors: 0,
                reconnectAttempts: 0,
                maxReconnectAttempts: 5,
                connectionQuality: 'excellent',
                latency: 0
            };
            
            app.session = {
                id: '',
                code: '',
                fightType: 'assaut',
                judgeCount: 3,
                rounds: 3,
                initialized: false,
                role: '',
                judgeId: null,
                judgeName: savedJudgeName, // Garder le nom pour faciliter la reconnexion
                judgeNumber: savedJudgeNumber, // Garder le num√©ro
                deviceId: 'device_' + Math.random().toString(36).substr(2, 9),
                startTime: null,
                status: 'inactive'
            };
            
            // R√©initialiser les donn√©es CPTE
            Object.assign(warnings, { red: {}, blue: {} });
            Object.assign(comptes, { red: {}, blue: {} });
            Object.assign(abandons, { red: false, blue: false });
            actionHistory = [];
            activeRounds = 3;
            
            // Retourner √† l'√©cran de s√©lection juge avec les champs pr√©-remplis
            document.getElementById('judgeInterface').classList.add('hidden');
            document.getElementById('judgeAccessSection').classList.remove('hidden');
            document.getElementById('syncIndicator').classList.add('hidden');
            
            // Pr√©-remplir les champs avec les donn√©es sauvegard√©es
            if (savedJudgeName) {
                document.getElementById('judgeNameInput').value = savedJudgeName;
            }
            if (savedJudgeNumber) {
                document.getElementById('judgeNumberInput').value = savedJudgeNumber;
            }
            
            showNotification('üö™ Vous √™tes maintenant d√©connect√©. Entrez un code de session pour vous reconnecter.', 'info');
        }

        // =====================
        // SYNCHRONISATION WEBRTC JUGE
        // =====================

        function syncJudgeData(actionType = 'general_sync', focusData = null) {
            if (app.session.role !== 'judge' || !app.webrtc.connections.size) {
                console.warn('‚ö†Ô∏è Pas de connexion WebRTC pour synchroniser');
                return;
            }
            
            // Construire les donn√©es compl√®tes de juge
            const judgeScores = {};
            for (let i = 1; i <= activeRounds; i++) {
                const redValue = parseInt(safeGetElement(`judgeRed${i}`)?.value) || 0;
                const blueValue = parseInt(safeGetElement(`judgeBlue${i}`)?.value) || 0;
                judgeScores[i] = { red: redValue, blue: blueValue };
            }
            
            const redBonusValue = parseInt(safeGetElement('judgeRedBonus')?.value) || 0;
            const blueBonusValue = parseInt(safeGetElement('judgeBlueBonus')?.value) || 0;
            
            // Calculer les totaux pour l'affichage d√©l√©gu√©
            let redSubtotal1 = 0, blueSubtotal1 = 0;
            for (let i = 1; i <= activeRounds; i++) {
                redSubtotal1 += judgeScores[i].red || 0;
                blueSubtotal1 += judgeScores[i].blue || 0;
            }
            
            let redWarningTotal = 0, blueWarningTotal = 0;
            for (let round in warnings.red) {
                if (round <= activeRounds) {
                    redWarningTotal += warnings.red[round] || 0;
                }
            }
            for (let round in warnings.blue) {
                if (round <= activeRounds) {
                    blueWarningTotal += warnings.blue[round] || 0;
                }
            }
            
            let redCompteTotal = 0, blueCompteTotal = 0;
            if (isCombat()) {
                for (let round in comptes.red) {
                    if (round <= activeRounds) {
                        redCompteTotal += comptes.red[round] || 0;
                    }
                }
                for (let round in comptes.blue) {
                    if (round <= activeRounds) {
                        blueCompteTotal += comptes.blue[round] || 0;
                    }
                }
            }
            
            const redSubtotal2 = redSubtotal1 - redWarningTotal - redCompteTotal;
            const blueSubtotal2 = blueSubtotal1 - blueWarningTotal - blueCompteTotal;
            const redTotal = redSubtotal2 + redBonusValue;
            const blueTotal = blueSubtotal2 + blueBonusValue;
            
            // D√©terminer le r√©sultat
            let result = 'En cours...';
            if (abandons.red && !abandons.blue) {
                result = `Victoire BLEU par abandon`;
            } else if (abandons.blue && !abandons.red) {
                result = `Victoire ROUGE par abandon`;
            } else if (abandons.red && abandons.blue) {
                result = `Double abandon`;
            } else if (areAllJudgeRoundsCompleted()) {
                if (redTotal > blueTotal) {
                    result = `Victoire ROUGE (${redTotal} - ${blueTotal})`;
                } else if (blueTotal > redTotal) {
                    result = `Victoire BLEU (${blueTotal} - ${redTotal})`;
                } else {
                    result = `√âgalit√© (${redTotal} - ${blueTotal})`;
                }
            }
            
            const syncData = {
                judgeId: app.session.judgeId,
                name: app.session.judgeName,
                number: app.session.judgeNumber,
                scores: judgeScores,
                warnings: warnings,
                comptes: comptes,
                abandons: abandons,
                bonuses: { red: redBonusValue, blue: blueBonusValue },
                totalRed: redTotal,
                totalBlue: blueTotal,
                result: result,
                lastAction: actionType,
                focusRound: focusData ? focusData.round : null,
                focusData: focusData,
                timestamp: Date.now(),
                connected: true
            };
            
            const syncResult = sendToAll({
                type: 'judge_data',
                data: syncData
            }, 'high');
            
            console.log('üì° Donn√©es juge synchronis√©es:', syncData);
            showNotification(`üì° Synchronisation ${actionType} envoy√©e (${syncResult.sent} connexions)`, 'success', 2000);
            
            return syncResult;
        }

        // =====================
        // EXPORT JUGE
        // =====================
        
        function exportJudgeToExcel() {
            try {
                // Cr√©er un tableau de donn√©es
                const data = [];
                
                // En-t√™te
                data.push(['FICHE DE JUGE - SAVATE BOXE FRAN√áAISE']);
                data.push([]);
                
                // Type de rencontre
                const fightType = getFightTypeLabel(app.session.fightType);
                data.push(['Type de rencontre:', fightType]);
                data.push([]);
                
                // Informations du juge
                data.push(['Juge:', app.session.judgeName || 'Non renseign√©']);
                data.push(['N¬∞ Juge:', app.session.judgeNumber || 'Non renseign√©']);
                data.push([]);
                
                // Informations des tireurs
                data.push(['TIREUR COIN ROUGE:', app.data.fighters.red || 'Non renseign√©']);
                data.push(['TIREUR COIN BLEU:', app.data.fighters.blue || 'Non renseign√©']);
                data.push([]);
                
                // Statut d'abandon
                if (abandons.red) data.push(['ABANDON COIN ROUGE']);
                if (abandons.blue) data.push(['ABANDON COIN BLEU']);
                if (abandons.red || abandons.blue) data.push([]);
                
                // Tableau des scores
                if (isCombat()) {
                    data.push(['', 'COIN ROUGE', '', '', '', 'COIN BLEU', '', '', '']);
                    data.push(['Reprise', 'Reprise', 'NOTE', 'AVT', 'CPTE', 'Reprise', 'NOTE', 'AVT', 'CPTE']);
                } else {
                    data.push(['', 'COIN ROUGE', '', '', 'COIN BLEU', '', '']);
                    data.push(['Reprise', 'Reprise', 'NOTE', 'AVT', 'Reprise', 'NOTE', 'AVT']);
                }
                
                // Scores par reprise
                for (let i = 1; i <= activeRounds; i++) {
                    const redScore = safeGetElement(`judgeRed${i}`)?.value || '-';
                    const blueScore = safeGetElement(`judgeBlue${i}`)?.value || '-';
                    const redAvt = warnings.red[i] ? 'A'.repeat(warnings.red[i]) : '';
                    const blueAvt = warnings.blue[i] ? 'A'.repeat(warnings.blue[i]) : '';
                    
                    if (isCombat()) {
                        const redCpte = comptes.red[i] ? 'C'.repeat(comptes.red[i]) : '';
                        const blueCpte = comptes.blue[i] ? 'C'.repeat(comptes.blue[i]) : '';
                        data.push([`Reprise ${i}`, i, redScore, redAvt, redCpte, i, blueScore, blueAvt, blueCpte]);
                    } else {
                        data.push([`Reprise ${i}`, i, redScore, redAvt, i, blueScore, blueAvt]);
                    }
                }
                
                data.push([]);
                
                // Totaux
                if (isCombat()) {
                    data.push(['Sous TOTAUX 1', '', safeGetElement('judgeRedSubtotal1')?.textContent || '0', '', '', '', safeGetElement('judgeBlueSubtotal1')?.textContent || '0', '', '']);
                    data.push(['Avertissements', '', safeGetElement('judgeRedWarnings')?.textContent || '0', '', '', '', safeGetElement('judgeBlueWarnings')?.textContent || '0', '', '']);
                    data.push(['Compte', '', safeGetElement('judgeRedComptes')?.textContent || '0', '', '', '', safeGetElement('judgeBlueComptes')?.textContent || '0', '', '']);
                    data.push(['Sous TOTAUX 2', '', safeGetElement('judgeRedSubtotal2')?.textContent || '0', '', '', '', safeGetElement('judgeBlueSubtotal2')?.textContent || '0', '', '']);
                    data.push(['Bonus', '', safeGetElement('judgeRedBonus')?.value || '0', '', '', '', safeGetElement('judgeBlueBonus')?.value || '0', '', '']);
                    data.push(['TOTAUX', '', safeGetElement('judgeRedTotal')?.textContent || '0', '', '', '', safeGetElement('judgeBlueTotal')?.textContent || '0', '', '']);
                } else {
                    data.push(['Sous TOTAUX 1', '', safeGetElement('judgeRedSubtotal1')?.textContent || '0', '', '', safeGetElement('judgeBlueSubtotal1')?.textContent || '0', '']);
                    data.push(['Avertissements', '', safeGetElement('judgeRedWarnings')?.textContent || '0', '', '', safeGetElement('judgeBlueWarnings')?.textContent || '0', '']);
                    data.push(['Sous TOTAUX 2', '', safeGetElement('judgeRedSubtotal2')?.textContent || '0', '', '', safeGetElement('judgeBlueSubtotal2')?.textContent || '0', '']);
                    data.push(['Bonus', '', safeGetElement('judgeRedBonus')?.value || '0', '', '', safeGetElement('judgeBlueBonus')?.value || '0', '']);
                    data.push(['TOTAUX', '', safeGetElement('judgeRedTotal')?.textContent || '0', '', '', safeGetElement('judgeBlueTotal')?.textContent || '0', '']);
                }
                
                data.push([]);
                data.push(['D√âCISION:', safeGetElement('judgeDecision')?.textContent || '-']);
                
                downloadCSV(data, `fiche_juge_${app.session.judgeId}_${formatDate(Date.now())}.csv`);
                showNotification('üìä Export Excel r√©alis√© avec succ√®s!', 'success');
                
            } catch (error) {
                console.error('Erreur lors de l\'export Excel:', error);
                showNotification('‚ùå Erreur lors de l\'export Excel.', 'error');
            }
        }

        function exportJudgeToMarkdown() {
            try {
                let markdown = '# FICHE DE JUGE - SAVATE BOXE FRAN√áAISE\n\n';
                
                // Type de rencontre
                const fightType = getFightTypeLabel(app.session.fightType);
                markdown += `## ${fightType}\n\n`;
                
                // Informations du juge
                markdown += '### Informations du juge\n';
                markdown += `- **Nom:** ${app.session.judgeName || 'Non renseign√©'}\n`;
                markdown += `- **N¬∞ Juge:** ${app.session.judgeNumber || 'Non renseign√©'}\n\n`;
                
                // Informations des tireurs
                markdown += '### Tireurs\n';
                markdown += `- **COIN ROUGE:** ${app.data.fighters.red || 'Non renseign√©'}`;
                if (abandons.red) markdown += ' *(ABANDON)*';
                markdown += '\n';
                markdown += `- **COIN BLEU:** ${app.data.fighters.blue || 'Non renseign√©'}`;
                if (abandons.blue) markdown += ' *(ABANDON)*';
                markdown += '\n\n';
                
                // Tableau des scores
                markdown += '### Scores par reprise\n\n';
                if (isCombat()) {
                    markdown += '| Reprise | Coin Rouge | Avertissements | Comptes | Coin Bleu | Avertissements | Comptes |\n';
                    markdown += '|---------|------------|----------------|---------|-----------|----------------|----------|\n';
                } else {
                    markdown += '| Reprise | Coin Rouge | Avertissements | Coin Bleu | Avertissements |\n';
                    markdown += '|---------|------------|----------------|-----------|----------------|\n';
                }
                
                for (let i = 1; i <= activeRounds; i++) {
                    const redScore = safeGetElement(`judgeRed${i}`)?.value || '-';
                    const blueScore = safeGetElement(`judgeBlue${i}`)?.value || '-';
                    const redAvt = warnings.red[i] ? 'A'.repeat(warnings.red[i]) : '-';
                    const blueAvt = warnings.blue[i] ? 'A'.repeat(warnings.blue[i]) : '-';
                    
                    if (isCombat()) {
                        const redCpte = comptes.red[i] ? 'C'.repeat(comptes.red[i]) : '-';
                        const blueCpte = comptes.blue[i] ? 'C'.repeat(comptes.blue[i]) : '-';
                        markdown += `| ${i} | ${redScore} | ${redAvt} | ${redCpte} | ${blueScore} | ${blueAvt} | ${blueCpte} |\n`;
                    } else {
                        markdown += `| ${i} | ${redScore} | ${redAvt} | ${blueScore} | ${blueAvt} |\n`;
                    }
                }
                
                markdown += '\n### R√©capitulatif\n\n';
                markdown += '| | Coin Rouge | Coin Bleu |\n';
                markdown += '|---|------------|------------|\n';
                markdown += `| **Sous TOTAUX 1** | ${safeGetElement('judgeRedSubtotal1')?.textContent || '0'} | ${safeGetElement('judgeBlueSubtotal1')?.textContent || '0'} |\n`;
                markdown += `| **Avertissements** | ${safeGetElement('judgeRedWarnings')?.textContent || '0'} | ${safeGetElement('judgeBlueWarnings')?.textContent || '0'} |\n`;
                
                if (isCombat()) {
                    markdown += `| **Compte** | ${safeGetElement('judgeRedComptes')?.textContent || '0'} | ${safeGetElement('judgeBlueComptes')?.textContent || '0'} |\n`;
                }
                
                markdown += `| **Sous TOTAUX 2** | ${safeGetElement('judgeRedSubtotal2')?.textContent || '0'} | ${safeGetElement('judgeBlueSubtotal2')?.textContent || '0'} |\n`;
                markdown += `| **Bonus** | ${safeGetElement('judgeRedBonus')?.value || '0'} | ${safeGetElement('judgeBlueBonus')?.value || '0'} |\n`;
                markdown += `| **TOTAUX** | ${safeGetElement('judgeRedTotal')?.textContent || '0'} | ${safeGetElement('judgeBlueTotal')?.textContent || '0'} |\n`;
                
                markdown += `\n### D√âCISION\n\n**${safeGetElement('judgeDecision')?.textContent || '-'}**\n`;
                
                markdown += `\n---\n_Export√© le ${new Date().toLocaleString('fr-FR')}_`;
                
                downloadText(markdown, `fiche_juge_${app.session.judgeId}_${formatDate(Date.now())}.md`);
                showNotification('üìù Export Markdown r√©alis√© avec succ√®s!', 'success');
                
            } catch (error) {
                console.error('Erreur lors de l\'export Markdown:', error);
                showNotification('‚ùå Erreur lors de l\'export Markdown.', 'error');
            }
        }

        // =====================
        // UTILITAIRES D'EXPORT
        // =====================
        
        function downloadCSV(data, filename) {
            let csv = '';
            data.forEach(row => {
                csv += row.map(cell => `"${cell}"`).join(',') + '\n';
            });
            
            const blob = new Blob(['\ufeff' + csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        }
        
        function downloadText(text, filename) {
            const blob = new Blob([text], { type: 'text/plain;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        }
        
        function downloadJSON(data, filename) {
            const jsonString = JSON.stringify(data, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        }

        // =====================
        // FONCTIONS DE R√âINITIALISATION AVANC√âES
        // =====================

        // Fonctions pour le d√©l√©gu√©
        function showResetOptions() {
            const modal = document.getElementById('resetModal');
            if (modal) {
                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            }
        }

        function closeResetModal() {
            const modal = document.getElementById('resetModal');
            if (modal) {
                modal.classList.add('hidden');
                document.body.style.overflow = 'auto';
            }
        }

        function performPartialReset() {
            if (!confirm('‚ö†Ô∏è Confirmer la r√©initialisation partielle ?\n\nTous les scores seront effac√©s mais la session et les juges connect√©s seront conserv√©s.')) {
                return;
            }

            console.log('üîÑ R√©initialisation partielle en cours...');
            
            // Sauvegarder l'√©tat avant la r√©initialisation
            saveDelegateState('R√âINITIALISATION PARTIELLE', {
                fightersReset: true,
                judgesDataReset: true,
                sessionPreserved: true
            });
            
            // R√©initialiser les noms des tireurs
            app.data.fighters = { red: '', blue: '' };
            document.getElementById('fighterRedName').value = '';
            document.getElementById('fighterBlueName').value = '';
            
            // R√©initialiser les donn√©es de tous les juges (scores, warnings, comptes, etc.)
            Object.keys(app.data.judges).forEach(judgeKey => {
                const judge = app.data.judges[judgeKey];
                // Conserver les infos de connexion et personnelles
                const preservedData = {
                    id: judge.id,
                    name: judge.name,
                    number: judge.number,
                    connected: judge.connected,
                    peerId: judge.peerId,
                    connectionTime: judge.connectionTime
                };
                
                // R√©initialiser tout le reste
                app.data.judges[judgeKey] = {
                    ...preservedData,
                    scores: {},
                    warnings: { red: {}, blue: {} },
                    comptes: { red: {}, blue: {} },
                    abandons: { red: false, blue: false },
                    bonuses: { red: 0, blue: 0 },
                    totalRed: 0,
                    totalBlue: 0,
                    result: 'En attente...',
                    lastUpdate: Date.now()
                };
            });

            // R√©initialiser les r√©sultats finaux
            app.data.results = null;

            // Envoyer la commande de r√©initialisation partielle √† tous les juges
            sendToAll({
                type: 'partial_reset_command',
                data: {
                    fighters: app.data.fighters,
                    timestamp: Date.now()
                }
            }, 'high');

            // Mettre √† jour l'interface d√©l√©gu√©
            updateJudgeMonitoring();
            updateRecapTable();
            updateFinalResult();

            closeResetModal();
            showNotification('‚úÖ R√©initialisation partielle effectu√©e avec succ√®s!', 'success');
            
            console.log('‚úÖ R√©initialisation partielle termin√©e');
        }

        function performCompleteReset() {
            if (!confirm('‚ö†Ô∏è ATTENTION: R√©initialisation compl√®te !\n\nToutes les connexions seront ferm√©es et une nouvelle session sera cr√©√©e.\nTous les juges devront se reconnecter.\n\n√ätes-vous certain ?')) {
                return;
            }

            console.log('üî• R√©initialisation compl√®te en cours...');
            
            // Sauvegarder l'√©tat avant la r√©initialisation compl√®te
            saveDelegateState('R√âINITIALISATION COMPL√àTE', {
                fullReset: true,
                connectionsReset: true,
                newSessionRequired: true
            });
            
            // Envoyer notification de fermeture aux juges
            sendToAll({
                type: 'session_reset_complete',
                data: {
                    message: 'Session r√©initialis√©e par le d√©l√©gu√©',
                    timestamp: Date.now()
                }
            }, 'critical');

            // Attendre un peu que le message soit envoy√©
            setTimeout(() => {
                resetApplication();
            }, 1000);

            closeResetModal();
            showNotification('üî• R√©initialisation compl√®te en cours...', 'warning');
        }

        // Fermer les modales en cliquant √† l'ext√©rieur
        document.addEventListener('click', function(event) {
            const resetModal = document.getElementById('resetModal');
            
            if (resetModal && event.target === resetModal) {
                closeResetModal();
            }
        });

        // =====================
        // R√âINITIALISATION COMPL√àTE
        // =====================
        
        function resetApplication() {
            if (!confirm('‚ö†Ô∏è Voulez-vous vraiment r√©initialiser l\'application compl√®te ?')) {
                return;
            }
            
            // Fermer toutes les connexions WebRTC
            if (app.webrtc.peer) {
                app.webrtc.peer.destroy();
            }
            
            // R√©initialiser toutes les variables
            app = {
                version: '4.2.0',
                webrtc: {
                    peer: null,
                    connections: new Map(),
                    isHost: false,
                    peerId: null,
                    lastSyncTime: Date.now(),
                    syncCount: 0,
                    syncErrors: 0,
                    reconnectAttempts: 0,
                    maxReconnectAttempts: 5,
                    connectionQuality: 'excellent',
                    latency: 0
                },
                session: {
                    id: '',
                    code: '',
                    fightType: 'assaut',
                    judgeCount: 3,
                    rounds: 3,
                    initialized: false,
                    role: '',
                    judgeId: null,
                    judgeName: '',
                    judgeNumber: '',
                    deviceId: 'device_' + Math.random().toString(36).substr(2, 9),
                    startTime: null,
                    status: 'inactive'
                },
                data: {
                    judges: {},
                    fighters: { red: '', blue: '' },
                    connectedDevices: new Set(),
                    changeLog: [],
                    results: null
                },
                monitoring: {
                    syncMetrics: {
                        totalSync: 0,
                        syncErrors: 0,
                        uptimeStart: Date.now()
                    }
                }
            };
            
            // R√©initialiser les donn√©es CPTE
            Object.assign(warnings, { red: {}, blue: {} });
            Object.assign(comptes, { red: {}, blue: {} });
            Object.assign(abandons, { red: false, blue: false });
            actionHistory = [];
            delegateActionHistory = []; // R√©initialiser l'historique d√©l√©gu√©
            activeRounds = 3;
            
            // R√©initialiser l'interface
            document.querySelectorAll('.hidden').forEach(el => el.classList.add('hidden'));
            document.getElementById('roleSelector').classList.remove('hidden');
            document.getElementById('contentArea').style.display = 'block';
            document.getElementById('syncIndicator').classList.add('hidden');
            
            // Fermer les modales si ouvertes
            closeResetModal();
            document.body.style.overflow = 'auto';
            
            // D√©sactiver le bouton d'annulation du d√©l√©gu√©
            const delegateUndoButton = document.getElementById('delegateUndoButton');
            if (delegateUndoButton) {
                delegateUndoButton.disabled = true;
                delegateUndoButton.textContent = '‚Ü∂ ANNULER DERNI√àRE ACTION';
            }
            
            // Nettoyer les notifications
            document.querySelectorAll('.message').forEach(el => el.remove());
            
            showNotification('üîÑ Application r√©initialis√©e compl√®tement', 'success');
            
            console.log('üî• R√©initialisation compl√®te termin√©e');
        }

        // =====================
        // INITIALISATION FINALE
        // =====================

        // Initialisation au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üì± DOM charg√© - Interface CPTE pr√™te');
            
            // V√©rifier PeerJS
            waitForPeerJS().then(() => {
                console.log('‚úÖ PeerJS disponible');
            }).catch(error => {
                console.warn('‚ö†Ô∏è PeerJS non disponible:', error);
                showNotification('‚ö†Ô∏è Fonctions WebRTC limit√©es - PeerJS non charg√©', 'warning');
            });
        });

        // Fallback si DOMContentLoaded ne fonctionne pas
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', function() {
                console.log('üì± DOM charg√© (fallback) - Interface CPTE pr√™te');
            });
        } else {
            console.log('üì± DOM d√©j√† charg√© - Interface CPTE imm√©diatement disponible');
        }

        console.log('‚úÖ SAVATE OFFICIALS - Interface CPTE Compl√®te Finalis√©e avec succ√®s');
        console.log('üéØ Toutes les fonctionnalit√©s CPTE sont op√©rationnelles');
        console.log('üåê Synchronisation WebRTC P2P activ√©e');
        console.log('üìä Monitoring d√©l√©gu√© temps r√©el disponible');
        console.log('üîß Onglets d√©l√©gu√© complets avec r√©capitulatif et r√©sultats');
        console.log('‚Ü∂ Fonction d\'annulation des actions d√©l√©gu√© int√©gr√©e');
    
    </script>
</body>
</html>